"""Complex address data."""
type Address {
  additionalName: String
  addressLine1: String
  addressLine2: String
  administrativeArea: String
  country: AddressCountry
  dependentLocality: String
  familyName: String
  givenName: String
  langcode: String
  locality: String
  organization: String
  postalCode: String
  sortingCode: String
}

"""Address country."""
type AddressCountry {
  """The code of the country."""
  code: String

  """The name of the country."""
  name: String
}

"""
Block content is a modular piece of content that can be displayed in various regions of a website's layout.
"""
type BlockContent implements BlockInterface {
  """The Content Block entity to be displayed within the block."""
  entity: BlockContentUnion!

  """The Universally Unique IDentifier (UUID)."""
  id: ID!

  """The rendered output of the block."""
  render: Html

  """The title of the block if provided."""
  title: String
}

"""Another example block type for testing of Unions in GraphQL."""
type BlockContentAnotherType implements BlockContentInterface & MetaTagInterface {
  """Body"""
  body: TextSummary

  """The time that the content block was last edited."""
  changed: DateTime!

  """The Universally Unique IDentifier (UUID)."""
  id: ID!

  """The content block language code."""
  langcode: Language!

  """The computed meta tags for the entity."""
  metatag: [MetaTagUnion!]!

  """A boolean indicating whether this block is reusable."""
  reusable: Boolean!

  """A brief description of your block."""
  title: String!
}

"""A basic block with a title and content."""
type BlockContentBasicBlock implements BlockContentInterface & MetaTagInterface {
  """Body"""
  body: TextSummary

  """The time that the content block was last edited."""
  changed: DateTime!

  """The Universally Unique IDentifier (UUID)."""
  id: ID!

  """The content block language code."""
  langcode: Language!

  """The computed meta tags for the entity."""
  metatag: [MetaTagUnion!]!

  """A boolean indicating whether this block is reusable."""
  reusable: Boolean!

  """A brief description of your block."""
  title: String!
}

"""Entity type block_content."""
interface BlockContentInterface {
  """The time that the content block was last edited."""
  changed: DateTime!

  """The Universally Unique IDentifier (UUID)."""
  id: ID!

  """The content block language code."""
  langcode: Language!

  """The computed meta tags for the entity."""
  metatag: [MetaTagUnion!]!

  """A boolean indicating whether this block is reusable."""
  reusable: Boolean!

  """A brief description of your block."""
  title: String!
}

"""Entity type block_content."""
union BlockContentUnion = BlockContentAnotherType | BlockContentBasicBlock

"""
Blocks are a modular piece of content that can be displayed in various regions of a website's layout.
"""
interface BlockInterface {
  """The Universally Unique IDentifier (UUID)."""
  id: ID!

  """The rendered output of the block."""
  render: Html

  """The title of the block if provided."""
  title: String
}

"""
A generic block plugin is a modular piece of content that can be displayed in various regions of a website's layout.
"""
type BlockPlugin implements BlockInterface {
  """The Universally Unique IDentifier (UUID)."""
  id: ID!

  """The rendered output of the block."""
  render: Html

  """The title of the block if provided."""
  title: String
}

"""Block types that can exist in the system."""
union BlockUnion = BlockContent | BlockPlugin

"""A Date range has a start and an end."""
type DateRange {
  """The end of the date range."""
  end: DateTime

  """The start of the date range."""
  start: DateTime
}

"""A DateTime object."""
type DateTime {
  """A string that will have a value of format ±hh:mm"""
  offset: UtcOffset!

  """RFC 3339 compliant time string."""
  time: Time!

  """
  Type represents date and time as number of milliseconds from start of the UNIX epoch.
  """
  timestamp: Timestamp!

  """A field whose value exists in the standard IANA Time Zone Database."""
  timezone: TimeZone!
}

"""An email address."""
scalar Email

"""A file object to represent an managed file."""
type File {
  """The description of the file."""
  description: String

  """The mime type of the file."""
  mime: String

  """The name of the file."""
  name: String

  """The size of the file in bytes."""
  size: Int!

  """The URL of the file."""
  url: String!
}

"""
An HTML string

Content of this type is deemed safe by the server for raw output given the
origin and the context of its usage. The HTML can still contain scripts or style
tags where the creating user had permission to input these.
"""
scalar Html

"""A image object to represent an managed file."""
type Image {
  """The alt text of the image."""
  alt: String

  """The height of the image."""
  height: Int!

  """The mime type of the image."""
  mime: String

  """The size of the image in bytes."""
  size: Int!

  """The title text of the image."""
  title: String

  """The URL of the image."""
  url: String!

  """Image variations control different sizes and formats for images."""
  variations(styles: [ImageStyleAvailable]): [ImageStyleDerivative!]

  """The width of the image."""
  width: Int!
}

"""Entity type image_style."""
type ImageStyle implements ImageStyleInterface {
  """The Universally Unique IDentifier (UUID)."""
  id: ID!
  name: String!
}

"""List of image styles available to use."""
enum ImageStyleAvailable {
  """Large 1x (636×636)"""
  LARGE

  """Large 2x (1272x1272)"""
  LARGE2X

  """Medium 1x (306×306)"""
  MEDIUM

  """Medium 2x (612x612)"""
  MEDIUM2X

  """Thumbnail (100×100)"""
  THUMBNAIL

  """Wide 1x (1296)"""
  WIDE

  """Wide 2x (2592)"""
  WIDE2X
}

"""ImageStyle derivatives for an Image."""
type ImageStyleDerivative {
  height: Int!
  name: String!
  url: String!
  width: Int!
}

"""Entity type image_style."""
interface ImageStyleInterface {
  """The Universally Unique IDentifier (UUID)."""
  id: ID!
  name: String!
}

"""Entity type image_style."""
union ImageStyleUnion = ImageStyle

"""Generic untyped input for key-value pairs."""
input KeyValueInput {
  key: String!
  value: String
}

"""A language definition provided by the CMS."""
type Language {
  """The language direction."""
  direction: String

  """The language code."""
  id: ID

  """The language name."""
  name: String
}

"""A layout defined by the CMS."""
type Layout {
  """Human readable category of the layout definition."""
  category: String!

  """A default region as fallback for convenience."""
  defaultRegion: String!

  """Machine readable name of the layout definition."""
  id: ID!

  """Human readable name of the layout definition."""
  label: String!

  """Regions represent where a User can place content within the CMS."""
  regions: [String!]!
}

"""
If this component has been designed by a User extra information will be available here.
"""
type LayoutParagraphs {
  """The layout definition for this component."""
  layout: Layout

  """
  Detail on where this component is suggested to be placed within the parent component.
  """
  position: LayoutParagraphsPosition
}

"""This content has been arranged using Layout Paragraphs."""
interface LayoutParagraphsInterface {
  """The layout information for this paragraph."""
  composition: LayoutParagraphs!
}

"""This component positionally belongs to another component's layout."""
type LayoutParagraphsPosition {
  """The UUID of the parent component this component belongs to."""
  parentId: ID

  """
  Where this component is suggested to be places within the parent component's regions.
  """
  region: String
}

"""A link."""
type Link {
  """Whether the link is internal to this website."""
  internal: Boolean!

  """The title of the link."""
  title: String

  """The URL of the link."""
  url: String
}

"""A locally hosted audio file."""
type MediaAudio implements MediaInterface & MetaTagInterface {
  """Audio file"""
  audio: File!

  """The time the media item was last edited."""
  changed: DateTime!

  """The time the media item was created."""
  created: DateTime!

  """The Universally Unique IDentifier (UUID)."""
  id: ID!

  """Language"""
  langcode: Language!

  """The computed meta tags for the entity."""
  metatag: [MetaTagUnion!]!

  """Name"""
  name: String!

  """URL alias"""
  path: String!

  """Published"""
  status: Boolean!
}

"""An uploaded file or document, such as a PDF."""
type MediaDocument implements MediaInterface & MetaTagInterface {
  """The time the media item was last edited."""
  changed: DateTime!

  """The time the media item was created."""
  created: DateTime!

  """Document"""
  document: File!

  """The Universally Unique IDentifier (UUID)."""
  id: ID!

  """Language"""
  langcode: Language!

  """The computed meta tags for the entity."""
  metatag: [MetaTagUnion!]!

  """Name"""
  name: String!

  """URL alias"""
  path: String!

  """Published"""
  status: Boolean!
}

"""Use local images for reusable media."""
type MediaImage implements MediaInterface & MetaTagInterface {
  """The time the media item was last edited."""
  changed: DateTime!

  """The time the media item was created."""
  created: DateTime!

  """The Universally Unique IDentifier (UUID)."""
  id: ID!

  """Image"""
  image: Image!

  """Language"""
  langcode: Language!

  """The computed meta tags for the entity."""
  metatag: [MetaTagUnion!]!

  """Name"""
  name: String!

  """URL alias"""
  path: String!

  """Published"""
  status: Boolean!
}

"""Entity type media."""
interface MediaInterface {
  """The time the media item was last edited."""
  changed: DateTime!

  """The time the media item was created."""
  created: DateTime!

  """The Universally Unique IDentifier (UUID)."""
  id: ID!

  """Language"""
  langcode: Language!

  """The computed meta tags for the entity."""
  metatag: [MetaTagUnion!]!

  """Name"""
  name: String!

  """URL alias"""
  path: String!

  """Published"""
  status: Boolean!
}

"""A remotely hosted video from YouTube or Vimeo."""
type MediaRemoteVideo implements MediaInterface & MetaTagInterface {
  """The time the media item was last edited."""
  changed: DateTime!

  """The time the media item was created."""
  created: DateTime!

  """The Universally Unique IDentifier (UUID)."""
  id: ID!

  """Language"""
  langcode: Language!

  """The computed meta tags for the entity."""
  metatag: [MetaTagUnion!]!

  """Name"""
  name: String!

  """URL alias"""
  path: String!

  """Published"""
  status: Boolean!

  """Video URL"""
  url: String!
}

"""Entity type media."""
union MediaUnion = MediaAudio | MediaDocument | MediaImage | MediaRemoteVideo | MediaVideo

"""A locally hosted video file."""
type MediaVideo implements MediaInterface & MetaTagInterface {
  """The time the media item was last edited."""
  changed: DateTime!

  """The time the media item was created."""
  created: DateTime!

  """The Universally Unique IDentifier (UUID)."""
  id: ID!

  """Language"""
  langcode: Language!

  """The computed meta tags for the entity."""
  metatag: [MetaTagUnion!]!

  """Name"""
  name: String!

  """URL alias"""
  path: String!

  """Published"""
  status: Boolean!

  """Video file"""
  video: File!
}

"""Entity type menu."""
type Menu implements MenuInterface {
  """The Universally Unique IDentifier (UUID)."""
  id: ID!

  """The menu items."""
  items: [MenuItem!]!

  """The menu name."""
  name: String!
}

"""List of menus available to load."""
enum MenuAvailable {
  """Footer"""
  FOOTER

  """Main navigation"""
  MAIN
}

"""Entity type menu."""
interface MenuInterface {
  """The Universally Unique IDentifier (UUID)."""
  id: ID!

  """The menu items."""
  items: [MenuItem!]!

  """The menu name."""
  name: String!
}

"""A menu item defined in the CMS."""
type MenuItem {
  """Attributes of this menu item."""
  attributes: MenuItemAttributes!

  """Child menu items of this menu item."""
  children: [MenuItem!]!

  """The description of the menu item."""
  description: String

  """Whether this menu item is intended to be expanded."""
  expanded: Boolean!

  """The Universally Unique IDentifier (UUID)."""
  id: ID!

  """Whether this menu item links to an internal route."""
  internal: Boolean!

  """
  The route this menu item uses. Route loading can be disabled per menu type.
  """
  route: RouteUnion

  """The title of the menu item."""
  title: String!

  """The URL of the menu item."""
  url: String
}

"""Menu item options set within the CMS."""
type MenuItemAttributes {
  """Menu item attribute class."""
  class: String

  """Menu item attribute id."""
  id: String

  """Menu item attribute target."""
  target: String
}

"""Entity type menu."""
union MenuUnion = Menu

"""A meta tag element."""
interface MetaTag {
  """The HTML tag for this meta element."""
  tag: String!
}

"""This entity has meta tags enabled."""
interface MetaTagInterface {
  """The computed meta tags for the entity."""
  metatag: [MetaTagUnion!]!
}

"""A meta link element."""
type MetaTagLink implements MetaTag {
  """The meta tag element attributes."""
  attributes: MetaTagLinkAttributes!

  """The HTML tag for this meta element."""
  tag: String!
}

"""A meta link element's attributes."""
type MetaTagLinkAttributes {
  """The href attribute of the link."""
  href: String

  """The rel attribute of the link."""
  rel: String
}

"""A meta property element."""
type MetaTagProperty implements MetaTag {
  """The meta tag element attributes."""
  attributes: MetaTagPropertyAttributes!

  """The HTML tag for this meta element."""
  tag: String!
}

"""A meta property element's attributes."""
type MetaTagPropertyAttributes {
  """The content attribute of the meta tag."""
  content: String

  """The property attribute of the meta tag."""
  property: String
}

"""A meta tag element."""
union MetaTagUnion = MetaTagLink | MetaTagProperty | MetaTagValue

"""A meta content element."""
type MetaTagValue implements MetaTag {
  """The meta tag element attributes."""
  attributes: MetaTagValueAttributes!

  """The HTML tag for this meta element."""
  tag: String!
}

"""A meta content element's attributes."""
type MetaTagValueAttributes {
  """The content attribute of the meta tag."""
  content: String

  """The name attribute of the meta tag."""
  name: String
}

"""A GraphQL mutation is a request that changes data on the server."""
type Mutation {
  """Placeholder field to enable schema mutation extension."""
  _: Boolean!
}

"""Entity type node."""
interface NodeInterface {
  """The time that the node was last edited."""
  changed: DateTime!

  """The time that the node was created."""
  created: DateTime!

  """The Universally Unique IDentifier (UUID)."""
  id: ID!

  """Language"""
  langcode: Language!

  """The computed meta tags for the entity."""
  metatag: [MetaTagUnion!]!

  """URL alias"""
  path: String!

  """Promoted to front page"""
  promote: Boolean!

  """Published"""
  status: Boolean!

  """Sticky at top of lists"""
  sticky: Boolean!

  """Title"""
  title: String!
}

"""
Use <em>basic pages</em> for your static content, such as an 'About us' page.
"""
type NodePage implements MetaTagInterface & NodeInterface {
  """The time that the node was last edited."""
  changed: DateTime!

  """Content"""
  content: [ParagraphUnion!]

  """The time that the node was created."""
  created: DateTime!

  """The Universally Unique IDentifier (UUID)."""
  id: ID!

  """Language"""
  langcode: Language!

  """The computed meta tags for the entity."""
  metatag: [MetaTagUnion!]!

  """URL alias"""
  path: String!

  """Promoted to front page"""
  promote: Boolean!

  """Published"""
  status: Boolean!

  """Sticky at top of lists"""
  sticky: Boolean!

  """Title"""
  title: String!
}

"""Entity type node."""
union NodeUnion = NodePage

"""Add an expanding and collapsing element."""
type ParagraphAccordion implements LayoutParagraphsInterface & ParagraphInterface {
  """Title"""
  accordionTitle: String!

  """The layout information for this paragraph."""
  composition: LayoutParagraphs!

  """The time that the Paragraph was created."""
  created: DateTime!

  """The Universally Unique IDentifier (UUID)."""
  id: ID!

  """Content"""
  items: [ParagraphUnion!]!

  """The paragraphs entity language code."""
  langcode: Language!
}

"""
Choose a block to display. Edit this fields settings to allow different blocks.
"""
type ParagraphBlock implements LayoutParagraphsInterface & ParagraphInterface {
  """Block"""
  block: BlockUnion

  """The layout information for this paragraph."""
  composition: LayoutParagraphs!

  """The time that the Paragraph was created."""
  created: DateTime!

  """The Universally Unique IDentifier (UUID)."""
  id: ID!

  """The paragraphs entity language code."""
  langcode: Language!
}

"""Add a title, text content with formatting and link."""
type ParagraphCallToAction implements LayoutParagraphsInterface & ParagraphInterface {
  """The layout information for this paragraph."""
  composition: LayoutParagraphs!

  """The time that the Paragraph was created."""
  created: DateTime!

  """The Universally Unique IDentifier (UUID)."""
  id: ID!

  """The paragraphs entity language code."""
  langcode: Language!

  """Link"""
  link: Link

  """Text"""
  text: Text

  """Title"""
  title: String
}

"""Entity type paragraph."""
interface ParagraphInterface {
  """The time that the Paragraph was created."""
  created: DateTime!

  """The Universally Unique IDentifier (UUID)."""
  id: ID!

  """The paragraphs entity language code."""
  langcode: Language!
}

"""Add Audio, Documents, Images or Videos and Embed YouTube videos."""
type ParagraphMedia implements LayoutParagraphsInterface & ParagraphInterface {
  """The layout information for this paragraph."""
  composition: LayoutParagraphs!

  """The time that the Paragraph was created."""
  created: DateTime!

  """Description"""
  description: Text

  """The Universally Unique IDentifier (UUID)."""
  id: ID!

  """The paragraphs entity language code."""
  langcode: Language!

  """Media"""
  media: MediaUnion!

  """Title"""
  title: String
}

"""Add a quote. Add citation and citation link"""
type ParagraphQuote implements LayoutParagraphsInterface & ParagraphInterface {
  """Give credit for the quote."""
  citation: String

  """The layout information for this paragraph."""
  composition: LayoutParagraphs!

  """The time that the Paragraph was created."""
  created: DateTime!

  """The Universally Unique IDentifier (UUID)."""
  id: ID!

  """The paragraphs entity language code."""
  langcode: Language!

  """Enter an optional link for the citation."""
  link: Link

  """Quote"""
  quote: Text!
}

"""
Sections are layout containers with composition for embedding more components.
"""
type ParagraphSection implements LayoutParagraphsInterface & ParagraphInterface {
  """The layout information for this paragraph."""
  composition: LayoutParagraphs!

  """The time that the Paragraph was created."""
  created: DateTime!

  """The Universally Unique IDentifier (UUID)."""
  id: ID!

  """The paragraphs entity language code."""
  langcode: Language!
}

"""Create a table with your own columns and rows."""
type ParagraphTable implements LayoutParagraphsInterface & ParagraphInterface {
  """The layout information for this paragraph."""
  composition: LayoutParagraphs!

  """The time that the Paragraph was created."""
  created: DateTime!

  """The Universally Unique IDentifier (UUID)."""
  id: ID!

  """The paragraphs entity language code."""
  langcode: Language!

  """Table"""
  table: Table!

  """Add a title to your block"""
  title: String
}

"""Text based content with formatting."""
type ParagraphText implements LayoutParagraphsInterface & ParagraphInterface {
  """The layout information for this paragraph."""
  composition: LayoutParagraphs!

  """The time that the Paragraph was created."""
  created: DateTime!

  """The Universally Unique IDentifier (UUID)."""
  id: ID!

  """The paragraphs entity language code."""
  langcode: Language!

  """Text"""
  text: Text!
}

"""Entity type paragraph."""
union ParagraphUnion = ParagraphAccordion | ParagraphBlock | ParagraphCallToAction | ParagraphMedia | ParagraphQuote | ParagraphSection | ParagraphTable | ParagraphText

"""A field whose value conforms to the standard E.164"""
scalar PhoneNumber

"""
The schema's entry-point for queries.

This acts as the public, top-level API from which all queries must start.
"""
type Query {
  """Load a Block plugin."""
  block(
    """Block plugin ID. Eg page_title_block, block_content:uuid"""
    id: ID!
  ): BlockUnion

  """Schema information."""
  info: SchemaInformation!

  """Load a Menu by name."""
  menu(
    """
    Optionally set the response language. Eg en, ja, fr. Setting this langcode
    will change the current language of the entire response.
    """
    langcode: String

    """Internal menu name. Eg MAIN"""
    name: MenuAvailable!
  ): Menu

  """Load a Route by path."""
  route(
    """
    Optionally set the response language. Eg en, ja, fr. Setting this langcode
    will change the current language of the entire response.
    """
    langcode: String

    """Internal path to load. Eg /about"""
    path: String!
  ): RouteUnion
}

"""Routes represent incoming requests that resolve to content."""
interface Route {
  """Whether this route is internal or external."""
  internal: Boolean!

  """URL of this route."""
  url: String!
}

"""A list of possible entities that can be returned by URL."""
union RouteEntityUnion = NodePage

"""Route outside of this website."""
type RouteExternal implements Route {
  """Whether this route is internal or external."""
  internal: Boolean!

  """URL of this route."""
  url: String!
}

"""Route within this website."""
type RouteInternal implements Route {
  """Breadcrumb links for this route."""
  breadcrumbs: [Link!]

  """Content assigned to this route."""
  entity: RouteEntityUnion

  """Whether this route is internal or external."""
  internal: Boolean!

  """URL of this route."""
  url: String!
}

"""Redirect to another URL with status."""
type RouteRedirect implements Route {
  """Whether this route is internal or external."""
  internal: Boolean!

  """Utility prop. Always true for redirects."""
  redirect: Boolean!

  """Suggested status for redirect. Eg 301."""
  status: Int!

  """URL of this route."""
  url: String!
}

"""Route types that can exist in the system."""
union RouteUnion = RouteExternal | RouteInternal | RouteRedirect

"""Schema information provided by the system."""
type SchemaInformation {
  """The schema description."""
  description: String

  """The internal path to the front page."""
  home: String

  """The schema version."""
  version: String
}

"""Sort direction."""
enum SortDirection {
  """Ascending"""
  ASC

  """Descending"""
  DESC
}

"""A table field."""
type Table {
  """The caption of the table."""
  caption: String

  """A text format associated with the row data."""
  format: String

  """The rows of the table."""
  rows: [TableRow]
}

"""A row of a table field."""
type TableRow {
  """The data of the row."""
  data: [String]

  """The weight of the row."""
  weight: Int
}

"""Entity type taxonomy_term."""
interface TermInterface {
  """The time that the term was last edited."""
  changed: DateTime!

  """Description"""
  description: Text!

  """The Universally Unique IDentifier (UUID)."""
  id: ID!

  """The term language code."""
  langcode: Language!

  """The computed meta tags for the entity."""
  metatag: [MetaTagUnion!]!

  """Name"""
  name: String!

  """The parents of this term."""
  parent: TermUnion

  """URL alias"""
  path: String!

  """Published"""
  status: Boolean!

  """The weight of this term in relation to other terms."""
  weight: Int!
}

"""Tags"""
type TermTag implements MetaTagInterface & TermInterface {
  """The time that the term was last edited."""
  changed: DateTime!

  """Description"""
  description: Text!

  """The Universally Unique IDentifier (UUID)."""
  id: ID!

  """The term language code."""
  langcode: Language!

  """The computed meta tags for the entity."""
  metatag: [MetaTagUnion!]!

  """Name"""
  name: String!

  """The parents of this term."""
  parent: TermUnion

  """URL alias"""
  path: String!

  """Published"""
  status: Boolean!

  """The weight of this term in relation to other terms."""
  weight: Int!
}

"""Entity type taxonomy_term."""
union TermUnion = TermTag

"""A processed text format defined by the CMS."""
type Text {
  """The text format used to process the text value."""
  format: String

  """The processed text value."""
  processed: Html

  """The raw text value."""
  value: String
}

"""A processed text format with summary defined by the CMS."""
type TextSummary {
  """The text format used to process the text value."""
  format: String

  """The processed text value."""
  processed: Html

  """The processed text summary."""
  summary: Html

  """The raw text value."""
  value: String
}

"""RFC 3339 compliant time string."""
scalar Time

"""A field whose value exists in the standard IANA Time Zone Database."""
scalar TimeZone

"""
Type represents date and time as number of milliseconds from start of the UNIX epoch.
"""
scalar Timestamp

"""
Unsupported entity or field type in the schema.
This entity may not have been enabled in the schema yet and is being referenced via entity reference.
"""
type UnsupportedType {
  """Unsupported type, always TRUE."""
  unsupported: Boolean
}

"""Untyped structured data. Eg JSON, configuration, settings, attributes."""
scalar UntypedStructuredData

"""A string that will have a value of format ±hh:mm"""
scalar UtcOffset

"""Views represent collections of curated data from the site."""
interface View {
  """The description of the view."""
  description: String

  """The machine name of the display."""
  display: String!

  """The ID of the view."""
  id: ID!

  """The human friendly label of the view."""
  label: String

  """The language code of the view."""
  langcode: String

  """Information about the page in the view."""
  pageInfo: ViewPageInfo!

  """The machine name of the view."""
  view: String!
}

"""Information about the page in a view."""
type ViewPageInfo {
  """Any result offset being used."""
  offset: Int!

  """The current page being returned."""
  page: Int!

  """How many results per page."""
  pageSize: Int!

  """How many results total."""
  total: Int!
}

"""A reference to an embedded view"""
type ViewReference {
  contextualFilter: [String!]
  display: String!
  pageSize: Int

  """
  The name of the query used to fetch the data, if the view is a GraphQL display.
  """
  query: String
  view: String!
}

"""All available view result types."""
union ViewResultUnion = UnsupportedType