"""Complex address data."""
type Address {
  additionalName: String
  addressLine1: String
  addressLine2: String
  administrativeArea: String
  country: AddressCountry
  dependentLocality: String
  familyName: String
  givenName: String
  langcode: String
  locality: String
  organization: String
  postalCode: String
  sortingCode: String
}

"""Address country."""
type AddressCountry {
  code: String
  name: String
}

"""Untyped attribute data. Eg configuration, settings."""
scalar Attributes

"""Block field information."""
interface Block {
  id: ID!
  render: Html
  title: String
}

"""Block field information."""
type BlockContent implements Block {
  entity: BlockContentUnion
  id: ID!
  render: Html
  title: String
}

"""Another example block type for testing of Unions in GraphQL."""
type BlockContentAnotherType implements BlockContentInterface {
  """Body"""
  body: TextSummary

  """The time that the content block was last edited."""
  changed: DateTime!

  """The Universally Unique IDentifier (UUID)."""
  id: ID!

  """The content block language code."""
  langcode: Language!

  """A boolean indicating whether this block is reusable."""
  reusable: Boolean!

  """A brief description of your block."""
  title: String!
}

"""A basic block with a title and content."""
type BlockContentBasicBlock implements BlockContentInterface {
  """Body"""
  body: TextSummary

  """The time that the content block was last edited."""
  changed: DateTime!

  """The Universally Unique IDentifier (UUID)."""
  id: ID!

  """The content block language code."""
  langcode: Language!

  """A boolean indicating whether this block is reusable."""
  reusable: Boolean!

  """A brief description of your block."""
  title: String!
}

"""Entity type block_content."""
interface BlockContentInterface {
  """The time that the content block was last edited."""
  changed: DateTime!

  """The Universally Unique IDentifier (UUID)."""
  id: ID!

  """The content block language code."""
  langcode: Language!

  """A boolean indicating whether this block is reusable."""
  reusable: Boolean!

  """A brief description of your block."""
  title: String!
}

union BlockContentUnion = BlockContentAnotherType | BlockContentBasicBlock

"""Block field information."""
type BlockPlugin implements Block {
  id: ID!
  render: Html
  title: String
}

"""Block types that can exist in the system."""
union BlockUnion = BlockContent | BlockPlugin

"""A paginated set of results."""
interface Connection {
  """The edges of this connection."""
  edges: [Edge!]!

  """The nodes of the edges of this connection."""
  nodes: [EdgeNode!]!

  """Information to aid in pagination."""
  pageInfo: ConnectionPageInfo!
}

"""Information about the page in a connection."""
type ConnectionPageInfo {
  """The cursor for the last element in this page."""
  endCursor: Cursor

  """Whether there are more pages in this connection."""
  hasNextPage: Boolean!

  """Whether there are previous pages in this connection."""
  hasPreviousPage: Boolean!

  """The cursor for the first element in this page."""
  startCursor: Cursor
}

"""Choose how your sorts will occur and on which field."""
enum ConnectionSortKeys {
  """Sort by creation date"""
  CREATED_AT

  """Sort by promoted status."""
  PROMOTED

  """Sort by sticky status."""
  STICKY

  """Sort by entity title."""
  TITLE

  """Sort by updated date"""
  UPDATED_AT
}

"""A cursor for use in pagination."""
scalar Cursor

"""A Date range has a start and an end."""
type DateRange {
  end: DateTime
  start: DateTime
}

"""A DateTime object."""
type DateTime {
  offset: UtcOffset!
  time: Time!
  timestamp: Timestamp!
  timezone: TimeZone!
}

"""
An edge in a connection.
Provides the cursor to fetch data based on the position of the associated
node. Specific edge implementations may provide more information about the
relationship they represent.
"""
interface Edge {
  cursor: Cursor!
  node: EdgeNode!
}

"""This entity is accessible over an Edge connection."""
interface EdgeNode {
  id: ID!
}

"""An email address."""
scalar Email

"""A file object to represent an managed file."""
type File {
  description: String
  mime: String
  name: String
  size: Int!
  url: String!
}

"""
An HTML string

Content of this type is deemed safe by the server for raw output given the
origin and the context of its usage. The HTML can still contain scripts or style
tags where the creating user had permission to input these.
"""
scalar Html

"""A image object to represent an managed file."""
type Image {
  alt: String
  height: Int!
  mime: String
  title: String
  url: String!

  """Image variations control different sizes and formats for images."""
  variations(styles: [ImageStyleAvailable]): [ImageStyleDerivative!]
  width: Int!
}

"""Entity type image_style."""
type ImageStyle implements ImageStyleInterface {
  """The Universally Unique IDentifier (UUID)."""
  id: ID!
  name: String!
}

"""List of image styles available to use."""
enum ImageStyleAvailable {
  """Large 1x (636×636)"""
  LARGE

  """Large 2x (1272x1272)"""
  LARGE2X

  """Medium 1x (306×306)"""
  MEDIUM

  """Medium 2x (612x612)"""
  MEDIUM2X

  """Thumbnail (100×100)"""
  THUMBNAIL

  """Wide 1x (1296)"""
  WIDE

  """Wide 2x (2592)"""
  WIDE2X
}

"""ImageStyle derivatives for an Image."""
type ImageStyleDerivative {
  height: Int!
  name: String!
  url: String!
  width: Int!
}

"""Entity type image_style."""
interface ImageStyleInterface {
  """The Universally Unique IDentifier (UUID)."""
  id: ID!
  name: String!
}

union ImageStyleUnion = ImageStyle

"""Generic untyped input for key-value pairs."""
input KeyValueInput {
  key: String!
  value: String
}

"""A language definition provided by the CMS."""
type Language {
  direction: String
  id: ID
  name: String
}

"""A layout defined by the CMS."""
type Layout {
  """Human readable category of the layout definition."""
  category: String!

  """A default region as fallback for convenience."""
  defaultRegion: String!

  """Machine readable name of the layout definition."""
  id: ID!

  """Human readable name of the layout definition."""
  label: String!

  """Regions represent where a User can place content within the CMS."""
  regions: [String!]!
}

"""
If this component has been designed by a User extra information will be available here.
"""
type LayoutParagraphs {
  layout: Layout
  position: LayoutParagraphsPosition
}

"""This content has been arranged by a User using a layout builder."""
interface LayoutParagraphsInterface {
  composition: LayoutParagraphs!
}

"""This component positionally belongs to another component's layout."""
type LayoutParagraphsPosition {
  """The UUID of the component this component belongs to."""
  parentId: ID

  """
  There this component is suggested to live within the parent component's regions.
  """
  region: String
}

type Link {
  internal: Boolean!
  title: String
  url: String
}

"""A locally hosted audio file."""
type MediaAudio implements MediaInterface {
  """Audio file"""
  audio: File!

  """The time the media item was last edited."""
  changed: DateTime!

  """The time the media item was created."""
  created: DateTime!

  """The Universally Unique IDentifier (UUID)."""
  id: ID!

  """Name"""
  name: String!

  """Published"""
  status: Boolean!
}

"""An uploaded file or document, such as a PDF."""
type MediaDocument implements MediaInterface {
  """The time the media item was last edited."""
  changed: DateTime!

  """The time the media item was created."""
  created: DateTime!

  """Document"""
  document: File!

  """The Universally Unique IDentifier (UUID)."""
  id: ID!

  """Name"""
  name: String!

  """Published"""
  status: Boolean!
}

"""Use local images for reusable media."""
type MediaImage implements MediaInterface {
  """The time the media item was last edited."""
  changed: DateTime!

  """The time the media item was created."""
  created: DateTime!

  """The Universally Unique IDentifier (UUID)."""
  id: ID!

  """Image"""
  image: Image!

  """Name"""
  name: String!

  """Published"""
  status: Boolean!
}

"""Entity type media."""
interface MediaInterface {
  """The time the media item was last edited."""
  changed: DateTime!

  """The time the media item was created."""
  created: DateTime!

  """The Universally Unique IDentifier (UUID)."""
  id: ID!

  """Name"""
  name: String!

  """Published"""
  status: Boolean!
}

"""A remotely hosted video from YouTube or Vimeo."""
type MediaRemoteVideo implements MediaInterface {
  """The time the media item was last edited."""
  changed: DateTime!

  """The time the media item was created."""
  created: DateTime!

  """The Universally Unique IDentifier (UUID)."""
  id: ID!

  """Name"""
  name: String!

  """Published"""
  status: Boolean!

  """Video URL"""
  url: String!
}

union MediaUnion = MediaAudio | MediaDocument | MediaImage | MediaRemoteVideo | MediaVideo

"""A locally hosted video file."""
type MediaVideo implements MediaInterface {
  """The time the media item was last edited."""
  changed: DateTime!

  """The time the media item was created."""
  created: DateTime!

  """The Universally Unique IDentifier (UUID)."""
  id: ID!

  """Name"""
  name: String!

  """Published"""
  status: Boolean!

  """Video file"""
  video: File!
}

"""Entity type menu."""
type Menu implements MenuInterface {
  """The Universally Unique IDentifier (UUID)."""
  id: ID!
  items: [MenuItem!]!
  name: String!
}

"""List of menus available to load."""
enum MenuAvailable {
  """Footer"""
  FOOTER

  """Main navigation"""
  MAIN
}

"""Entity type menu."""
interface MenuInterface {
  """The Universally Unique IDentifier (UUID)."""
  id: ID!
  items: [MenuItem!]!
  name: String!
}

"""A menu item defined in the CMS."""
type MenuItem {
  """Attributes of this menu item."""
  attributes: MenuItemAttributes!

  """Child menu items of this menu item."""
  children: [MenuItem!]!
  description: String

  """Whether this menu item is intended to be expanded."""
  expanded: Boolean!
  id: ID!

  """Whether this menu item links to an internal route."""
  internal: Boolean!

  """
  The route this menu item uses. Route loading can be disabled per menu type.
  """
  route: RouteUnion
  title: String!
  url: String
}

"""Menu item options set within the CMS."""
type MenuItemAttributes {
  """Menu item attribute class."""
  class: String

  """Menu item attribute id."""
  id: String

  """Menu item attribute target."""
  target: String
}

union MenuUnion = Menu

"""
Meta elements are tags used in HTML and XHTML documents to provide structured metadata about a Web page.
"""
interface MetaTag {
  tag: String!
}

type MetaTagLink implements MetaTag {
  attributes: MetaTagLinkAttributes!
  tag: String!
}

type MetaTagLinkAttributes {
  href: String
  rel: String
}

type MetaTagProperty implements MetaTag {
  attributes: MetaTagPropertyAttributes!
  tag: String!
}

type MetaTagPropertyAttributes {
  content: String
  property: String
}

union MetaTagUnion = MetaTagLink | MetaTagProperty | MetaTagValue

type MetaTagValue implements MetaTag {
  attributes: MetaTagValueAttributes!
  tag: String!
}

type MetaTagValueAttributes {
  content: String
  name: String
}

"""A GraphQL mutation is a request that changes data on the server."""
type Mutation {
  """Placeholder field to enable schema mutation extension."""
  _: Boolean!
}

"""Entity type node."""
interface NodeInterface {
  """The username of the content author."""
  author: User!

  """The time that the node was last edited."""
  changed: DateTime!

  """The time that the node was created."""
  created: DateTime!

  """The Universally Unique IDentifier (UUID)."""
  id: ID!

  """Language"""
  langcode: Language!

  """The computed meta tags for the entity."""
  metatag: [MetaTagUnion!]!

  """URL alias"""
  path: String!

  """Promoted to front page"""
  promote: Boolean!

  """Published"""
  status: Boolean!

  """Sticky at top of lists"""
  sticky: Boolean!

  """Title"""
  title: String!
}

"""
Use <em>basic pages</em> for your static content, such as an 'About us' page.
"""
type NodePage implements NodeInterface {
  """The username of the content author."""
  author: User!

  """The time that the node was last edited."""
  changed: DateTime!

  """Content"""
  content: [ParagraphUnion!]

  """The time that the node was created."""
  created: DateTime!

  """The Universally Unique IDentifier (UUID)."""
  id: ID!

  """Language"""
  langcode: Language!

  """The computed meta tags for the entity."""
  metatag: [MetaTagUnion!]!

  """URL alias"""
  path: String!

  """Promoted to front page"""
  promote: Boolean!

  """Published"""
  status: Boolean!

  """Sticky at top of lists"""
  sticky: Boolean!

  """Title"""
  title: String!
}

union NodeUnion = NodePage

"""Add an expanding and collapsing element."""
type ParagraphAccordion implements LayoutParagraphsInterface & ParagraphInterface {
  """Title"""
  accordionTitle: String!

  """Layout metadata for this paragraph."""
  composition: LayoutParagraphs!

  """The time that the Paragraph was created."""
  created: DateTime!

  """The Universally Unique IDentifier (UUID)."""
  id: ID!

  """Content"""
  items: [ParagraphUnion!]!
}

"""
Choose a block to display. Edit this fields settings to allow different blocks.
"""
type ParagraphBlock implements LayoutParagraphsInterface & ParagraphInterface {
  """Block"""
  block: BlockUnion

  """Layout metadata for this paragraph."""
  composition: LayoutParagraphs!

  """The time that the Paragraph was created."""
  created: DateTime!

  """The Universally Unique IDentifier (UUID)."""
  id: ID!
}

"""Add a title, text content with formatting and link."""
type ParagraphCallToAction implements LayoutParagraphsInterface & ParagraphInterface {
  """Layout metadata for this paragraph."""
  composition: LayoutParagraphs!

  """The time that the Paragraph was created."""
  created: DateTime!

  """The Universally Unique IDentifier (UUID)."""
  id: ID!

  """Link"""
  link: Link

  """Text"""
  text: Text

  """Title"""
  title: String
}

"""Entity type paragraph."""
interface ParagraphInterface {
  """The time that the Paragraph was created."""
  created: DateTime!

  """The Universally Unique IDentifier (UUID)."""
  id: ID!
}

"""Add Audio, Documents, Images or Videos and Embed YouTube videos."""
type ParagraphMedia implements LayoutParagraphsInterface & ParagraphInterface {
  """Layout metadata for this paragraph."""
  composition: LayoutParagraphs!

  """The time that the Paragraph was created."""
  created: DateTime!

  """Description"""
  description: Text

  """The Universally Unique IDentifier (UUID)."""
  id: ID!

  """Media"""
  media: MediaUnion!

  """Title"""
  title: String
}

"""Add a quote. Add citation and citation link"""
type ParagraphQuote implements LayoutParagraphsInterface & ParagraphInterface {
  """Give credit for the quote."""
  citation: String

  """Layout metadata for this paragraph."""
  composition: LayoutParagraphs!

  """The time that the Paragraph was created."""
  created: DateTime!

  """The Universally Unique IDentifier (UUID)."""
  id: ID!

  """Enter an optional link for the citation."""
  link: Link

  """Quote"""
  quote: Text!
}

"""
Sections are layout containers with composition for embedding more components.
"""
type ParagraphSection implements LayoutParagraphsInterface & ParagraphInterface {
  """Layout metadata for this paragraph."""
  composition: LayoutParagraphs!

  """The time that the Paragraph was created."""
  created: DateTime!

  """The Universally Unique IDentifier (UUID)."""
  id: ID!
}

"""Create a table with your own columns and rows."""
type ParagraphTable implements LayoutParagraphsInterface & ParagraphInterface {
  """Layout metadata for this paragraph."""
  composition: LayoutParagraphs!

  """The time that the Paragraph was created."""
  created: DateTime!

  """The Universally Unique IDentifier (UUID)."""
  id: ID!

  """Table"""
  table: Table!

  """Add a title to your block"""
  title: String
}

"""Text based content with formatting."""
type ParagraphText implements LayoutParagraphsInterface & ParagraphInterface {
  """Layout metadata for this paragraph."""
  composition: LayoutParagraphs!

  """The time that the Paragraph was created."""
  created: DateTime!

  """The Universally Unique IDentifier (UUID)."""
  id: ID!

  """Text"""
  text: Text!
}

union ParagraphUnion = ParagraphAccordion | ParagraphBlock | ParagraphCallToAction | ParagraphMedia | ParagraphQuote | ParagraphSection | ParagraphTable | ParagraphText

"""A field whose value conforms to the standard E.164"""
scalar PhoneNumber

"""
The schema's entry-point for queries.

This acts as the public, top-level API from which all queries must start.
"""
type Query {
  """Load a Block plugin."""
  block(
    """Block plugin ID. Eg page_title_block, block_content:uuid"""
    block_plugin_id: String!
  ): BlockUnion

  """Schema information."""
  info: SchemaInformation!

  """Load a Route by path."""
  menu(
    """Internal menu name. Eg main"""
    name: MenuAvailable!
  ): Menu

  """Load a Route by path."""
  route(
    """Optionally filter the route by language. Eg en, ja, fr."""
    langcode: String

    """Internal path to load. Eg /about"""
    path: String!
  ): RouteUnion

  """
  Get information about the currently authenticated user. NULL if not logged in.
  """
  viewer: User
}

"""Routes represent incoming requests that resolve to content."""
interface Route {
  """Whether this route is internal or external."""
  internal: Boolean!

  """URL of this route."""
  url: String!
}

"""A list of possible entities that can be returned by URL."""
union RouteEntityUnion = NodePage

"""Route outside of this website."""
type RouteExternal implements Route {
  """Whether this route is internal or external."""
  internal: Boolean!

  """URL of this route."""
  url: String!
}

"""Route within this website."""
type RouteInternal implements Route {
  """Breadcrumb links for this route."""
  breadcrumbs: [Link!]

  """Content assigned to this route."""
  entity: RouteEntityUnion

  """Whether this route is internal or external."""
  internal: Boolean!

  """URL of this route."""
  url: String!
}

"""Redirect to another URL with status."""
type RouteRedirect implements Route {
  """Whether this route is internal or external."""
  internal: Boolean!

  """Utility prop. Always true for redirects."""
  redirect: Boolean!

  """Suggested status for redirect. Eg 301."""
  status: Int!

  """URL of this route."""
  url: String!
}

"""Route types that can exist in the system."""
union RouteUnion = RouteExternal | RouteInternal | RouteRedirect

"""Schema information provided by the system."""
type SchemaInformation {
  """The schema description."""
  description: String

  """The internal path to the front page."""
  home: String

  """The schema version."""
  version: String
}

"""List of menus available to load."""
enum SortDirection {
  """Ascending"""
  ASC

  """Descending"""
  DESC
}

type Table {
  caption: String

  """A text format associated with the row data."""
  format: String
  rows: [TableRow]
}

type TableRow {
  data: [String]
  weight: Int
}

"""Entity type taxonomy_term."""
interface TermInterface {
  """The time that the term was last edited."""
  changed: DateTime!

  """Description"""
  description: Text!

  """The Universally Unique IDentifier (UUID)."""
  id: ID!

  """The term language code."""
  langcode: Language!

  """Name"""
  name: String!

  """The parents of this term."""
  parent: TermUnion

  """URL alias"""
  path: String!

  """Published"""
  status: Boolean!
}

"""Tags"""
type TermTags implements TermInterface {
  """The time that the term was last edited."""
  changed: DateTime!

  """Description"""
  description: Text!

  """The Universally Unique IDentifier (UUID)."""
  id: ID!

  """The term language code."""
  langcode: Language!

  """Name"""
  name: String!

  """The parents of this term."""
  parent: TermUnion

  """URL alias"""
  path: String!

  """Published"""
  status: Boolean!
}

union TermUnion = TermTags

"""A processed text format defined by the CMS."""
type Text {
  format: String
  processed: Html
  value: String
}

"""A processed text format with summary defined by the CMS."""
type TextSummary {
  format: String
  processed: Html
  summary: Html
  value: String
}

"""RFC 3339 compliant time string."""
scalar Time

"""A field whose value exists in the standard IANA Time Zone Database."""
scalar TimeZone

"""
Type represents date and time as number of milliseconds from start of the UNIX epoch.
"""
scalar Timestamp

"""
Unsupported entity or field type in the schema.
This entity may not have been enabled in the schema yet and is being referenced via entity reference.
"""
type UnsupportedType {
  """Unsupported type, always TRUE."""
  unsupported: Boolean
}

"""Entity type user."""
type User implements UserInterface {
  """The time that the user was last edited."""
  changed: DateTime!

  """The time that the user was created."""
  created: DateTime!

  """The Universally Unique IDentifier (UUID)."""
  id: ID!

  """The email of this user."""
  mail: Email

  """The name of this user."""
  name: String!

  """The roles the user has."""
  roles: [UserRoles!]

  """Whether the user is active or blocked."""
  status: UserStatus!
}

"""Entity type user."""
interface UserInterface {
  """The time that the user was last edited."""
  changed: DateTime!

  """The time that the user was created."""
  created: DateTime!

  """The Universally Unique IDentifier (UUID)."""
  id: ID!

  """The email of this user."""
  mail: Email

  """The name of this user."""
  name: String!

  """The roles the user has."""
  roles: [UserRoles!]

  """Whether the user is active or blocked."""
  status: UserStatus!
}

"""User roles."""
scalar UserRoles

"""Whether the user is active or blocked."""
enum UserStatus {
  """An active user is able to login on the platform and view content"""
  ACTIVE

  """
  A blocked user is unable to access the platform, although their content will still be visible until it's deleted.
  """
  BLOCKED
}

union UserUnion = User

"""A string that will have a value of format ±hh:mm"""
scalar UtcOffset

"""Views represent collections of curated data from the site."""
interface View {
  """The description of the view."""
  description: String

  """The machine name of the display."""
  display: String!

  """The ID of the view."""
  id: ID!

  """The human friendly label of the view."""
  label: String

  """The language code of the view."""
  langcode: String

  """Information about the page in the view."""
  pageInfo: ViewPageInfo!

  """The machine name of the view."""
  view: String!
}

"""Information about the page in a view."""
type ViewPageInfo {
  """Any result offset being used."""
  offset: Int!

  """The current page being returned."""
  page: Int!

  """How many results per page."""
  pageSize: Int!

  """How many results total."""
  total: Int!
}

"""A reference to an embedded view"""
type ViewReference {
  contextualFilter: [String!]
  display: String!
  pageSize: Int

  """
  The name of the query used to fetch the data, if the view is a GraphQL display.
  """
  query: String
  view: String!
}

"""All available view result types."""
union ViewResultUnion = UnsupportedType